package coingecko

import (
	"fmt"
	"strings"
)

// symbol to base coin mapping
var COIN_GECKO_MAPPING = map[string]string{
	"bitcoin":                   "BTC",
	"ethereum":                  "ETH",
	"binancecoin":               "BNB",
	"tether":                    "USDT",
	"usd-coin":                  "USDC",
	"binance-usd":               "BUSD",
	"dai":                       "DAI",
	"ripple":                    "XRP",
	"dogecoin":                  "DOGE",
	"cardano":                   "ADA",
	"matic-network":             "MATIC",
	"polkadot":                  "DOT",
	"litecoin":                  "LTC",
	"staked-ether":              "STETH",
	"okb":                       "OKB",
	"shiba-inu":                 "SHIB",
	"solana":                    "SOL",
	"tron":                      "TRX",
	"uniswap":                   "UNI",
	"avalanche-2":               "AVAX",
	"chainlink":                 "LINK",
	"ethereum-classic":          "ETC",
	"the-open-network":          "TON",
	"monero":                    "XMR",
	"stellar":                   "XLM",
	"algorand":                  "ALGO",
	"quant-network":             "QNT",
	"filecoin":                  "FIL",
	"near":                      "NEAR",
	"vechain":                   "VET",
	"flow":                      "FLOW",
	"apecoin":                   "APE",
	"internet-computer":         "ICP",
	"elrond-erd-2":              "EGLD",
	"chiliz":                    "CHZ",
	"eos":                       "EOS",
	"chain-2":                   "XCN",
	"tezos":                     "XTZ",
	"lido-dao":                  "LDO",
	"the-sandbox":               "SAND",
	"theta-token":               "THETA",
	"aave":                      "AAVE",
	"axie-infinity":             "AXS",
	"decentraland":              "MANA",
	"iota":                      "MIOTA",
	"maker":                     "MKR",
	"pancakeswap-token":         "CAKE",
	"aptos":                     "APT",
	"ecash":                     "XEC",
	"zcash":                     "ZEC",
	"klay-token":                "KLAY",
	"gatechain-token":           "GT",
	"neo":                       "NEO",
	"arweave":                   "AR",
	"dash":                      "DASH",
	"fantom":                    "FTM",
	"the-graph":                 "GRT",
	"havven":                    "SNX",
	"mina-protocol":             "MINA",
	"curve-dao-token":           "CRV",
	"nexo":                      "NEXO",
	"radix":                     "XRD",
	"gmx":                       "GMX",
	"basic-attention-token":     "BAT",
	"zilliqa":                   "ZIL",
	"ethereum-name-service":     "ENS",
	"1inch":                     "1INCH",
	"helium":                    "HNT",
	"xdce-crowd-sale":           "XDC",
	"frax-share":                "FXS",
	"blockstack":                "STX",
	"convex-finance":            "CVX",
	"enjincoin":                 "ENJ",
	"immutable-x":               "IMX",
	"loopring":                  "LRC",
	"decred":                    "DCR",
	"defichain":                 "DFI",
	"theta-fuel":                "TFUEL",
	"amp-token":                 "AMP",
	"compound-governance-token": "COMP",
	"nxm":                       "NXM",
	"dydx":                      "DYDX",
	"cosmos":                    "ATOM",
	"terra-luna-2":              "LUNA",
	"crypto-com-chain":          "CRO",
	"osmosis":                   "OSMO",
	"thorchain":                 "RUNE",
	"evmos":                     "EVMOS",
	"kava":                      "KAVA",
	"oec-token":                 "OKT",
	"ankr":                      "ANKR",
	"kadena":                    "KDA",
	"terra-luna":                "LUNC",
	"terrausd":                  "USTC",
	"injective-protocol":        "INJ",
	"secret":                    "SCRT",
	"juno-network":              "JUNO",
	"stargaze":                  "STARS",
	"akash-network":             "AKT",
	"white-whale":               "WHALE",  // White Whale chain
	"switcheo":                  "SWTH",   // Carbon chain
	"stride-staked-luna":        "STLUNA", // Stride chain
}

func ParseSymbol(symbol string) (string, string, error) {
	symbol = strings.ToLower(symbol)
	if base, ok := COIN_GECKO_MAPPING[symbol]; ok {
		return base, "USD", nil
	} else {
		return "", "", fmt.Errorf("failed to parse CoinGecko %s", symbol)
	}
}
